{"version":3,"sources":["utils/upload.js","pages/Register/UploadHeader/index.js"],"names":["uploadBase64Img","client","base64Content","filename","successCallck","errorCallback","imgfile","dataurl","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","Blob","type","dataURLtoFile","multipartUpload","then","res","catch","err","beforeUpload","file","isJpgOrPng","message","error","isLt2M","size","props","useState","loading","setLoading","imageUrl","setImageUrl","imgname","uploadButton","useMemo","className","name","listType","styles","upload","showUploadList","onChange","info","status","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","getBase64","originFileObj","xGet","OSS","region","accessKeyId","AccessKeyId","accessKeySecret","AccessKeySecret","bucket","stsToken","SecurityToken","Date","now","data","statusCode","nImageUrl","requestUrls","updateImgDate","headerImgUrl","headerImgName","src","alt","style","width"],"mappings":"2PAuBe,SAASA,EAAgBC,EAAOC,EAAcC,EAASC,EAAcC,GAClF,IAAMC,EAjBc,SAAuBC,EAASJ,GAMpD,IALA,IAAMK,EAAMD,EAAQE,MAAM,KACpBC,EAAOF,EAAI,GAAGG,MAAM,WAAW,GAC/BC,EAAOC,KAAKL,EAAI,IAClBM,EAAIF,EAAKG,OACPC,EAAQ,IAAIC,WAAWH,GACtBA,KACLE,EAAMF,GAAKF,EAAKM,WAAWJ,GAE7B,OAAO,IAAIK,KAAK,CAACH,GAAQ,CAAEI,KAAMV,IAQjBW,CAAcnB,GAE9BD,EAAOqB,gBAAgBnB,EAAUG,EAAQ,CACrCI,KAAK,cACNa,MAAK,SAACC,GACPpB,GAAeA,EAAcoB,MAC5BC,OAAM,SAACC,GACRrB,GAAeA,EAAcqB,M,YCjBjC,IAAMC,EAAe,SAAAC,GACjB,IAAMC,EAA2B,eAAdD,EAAKR,MAAuC,cAAdQ,EAAKR,KACjDS,GACDC,IAAQC,MAAM,qCAElB,IAAMC,EAASJ,EAAKK,KAAO,KAAO,KAAO,EAIzC,OAHKD,GACDF,IAAQC,MAAM,gCAEXF,GAAcG,GAKV,mBAAUE,GAAO,IAAD,EACEC,oBAAS,GADX,mBACpBC,EADoB,KACZC,EADY,OAEIF,mBAAS,IAFb,mBAEpBG,EAFoB,KAEXC,EAFW,KAGvBC,EAAU,GACRC,EAAeC,mBAAQ,kBACzB,6BACE,kBAAC,IAAD,CAAMtB,KAAMgB,EAAU,UAAY,SAClC,yBAAKO,UAAU,mBAAf,aAEJ,CAACP,IA2CH,OACE,kBAAC,IAAD,CACEQ,KAAK,SACLC,SAAS,eACTF,UAAWG,IAAOC,OAClBC,gBAAgB,EAChBrB,aAAcA,EACdsB,SAhDiB,SAAAC,GACQ,cAArBA,EAAKtB,KAAKuB,OAIW,SAArBD,EAAKtB,KAAKuB,QApCtB,SAAmBC,EAAKC,GACtB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,QAAQ,kBAAMH,EAASC,EAAOG,WACtDH,EAAOI,cAAcN,GAmCXO,CAAUT,EAAKtB,KAAKgC,eAAe,SAAAtB,GAC/BuB,YAAK,WACJtC,MAAK,SAAAC,GAQFxB,EAPe,IAAI8D,IAAI,CACnBC,OAAO,iBACPC,YAAYxC,EAAIyC,YAChBC,gBAAgB1C,EAAI2C,gBACpBC,OAAO,cACPC,SAAS7C,EAAI8C,gBAIbhC,EAFW,kBAGAiC,KAAKC,MAHL,YAGctB,EAAKtB,KAAKgB,OACnC,SAAA6B,GACI,GAAyB,MAAtBA,EAAKjD,IAAIkD,WAAiB,CACzB,IAAMC,EAAYF,EAAKjD,IAAIoD,YAAY,GAAG,8BAC1CpC,EAAUiC,EAAK7B,KACfP,GAAW,GACXE,EAAYoC,GACZzC,EAAM2C,cAAc,CAChBC,aAAaH,EACbI,cAAcvC,GAChBA,aA5BtBH,GAAW,KAgDdC,EAAW,yBAAK0C,IAAK1C,EAAU2C,IAAI,SAASC,MAAO,CAAEC,MAAO,UAAe1C","file":"static/js/15.c6bbeaf9.chunk.js","sourcesContent":["\n/**\n * base64 to file\n * @param dataurl   base64 content\n * @param filename  set up a meaningful suffix, or you can set mime type in options\n * @returns {File|*}\n */\nconst dataURLtoFile = function dataURLtoFile(dataurl, filename) {\n  const arr = dataurl.split(',');\n  const mime = arr[0].match(/:(.*?);/)[1];\n  const bstr = atob(arr[1]);\n  let n = bstr.length;\n  const u8arr = new Uint8Array(n);\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n  return new Blob([u8arr], { type: mime });// if env support File, also can use this: return new File([u8arr], filename, { type: mime });\n};\n\n\n\n\n// client表示OSS client实例\nexport default function uploadBase64Img(client,base64Content,filename,successCallck,errorCallback) {\n  const imgfile = dataURLtoFile(base64Content, filename);\n  //key表示上传的object key ,imgFile表示dataURLtoFile处理后返回的图片\n  client.multipartUpload(filename, imgfile,{\n      mime:\"image/jpg\",\n  }).then((res) => {\n    successCallck&&successCallck(res);\n  }).catch((err) => {\n    errorCallback&&errorCallback(err);\n  });\n};\n\t\t\t","import React,{useState,useMemo} from 'react';\nimport OSS from 'ali-oss';\nimport {Icon,Upload,message} from 'antd';\nimport styles from './index.module.css';\nimport uploadBase64Img from './../../../utils/upload';\nimport  {xGet} from './../../../utils/xFetch';\n\n\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nconst beforeUpload = file => {\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n    if (!isJpgOrPng) {\n        message.error('You can only upload JPG/PNG file!');\n    }\n    const isLt2M = file.size / 1024 / 1024 < 2;\n    if (!isLt2M) {\n        message.error('Image must smaller than 2MB!');\n    }\n    return isJpgOrPng && isLt2M;\n}\n\n\n\nexport default function (props){\n    const [loading,setLoading] = useState(false);\n    const [imageUrl,setImageUrl] = useState('');\n    let imgname = '';\n    const uploadButton = useMemo(()=>(\n        <div>\n          <Icon type={loading ? 'loading' : 'plus'} />\n          <div className=\"ant-upload-text\">Upload</div>\n        </div>\n    ),[loading]);\n\n    const handleChange = info => {\n        if (info.file.status === 'uploading') {\n            setLoading(true);\n            return;\n        }\n        if (info.file.status === 'done') {\n        // Get this url from response in real world.\n            getBase64(info.file.originFileObj, imageUrl =>{\n                xGet('/ossSts')\n                .then(res=>{\n                    const client = new OSS({\n                        region:'oss-cn-beijing',\n                        accessKeyId:res.AccessKeyId,\n                        accessKeySecret:res.AccessKeySecret,\n                        bucket:'melodyworld',\n                        stsToken:res.SecurityToken\n                    })\n                    uploadBase64Img(\n                        client,\n                        imageUrl,\n                        `headers/${Date.now()}_${info.file.name}`,\n                        data=>{\n                            if(data.res.statusCode===200){\n                                const nImageUrl = data.res.requestUrls[0]+'?x-oss-process=style/_90_90';\n                                imgname = data.name;\n                                setLoading(false);\n                                setImageUrl(nImageUrl);\n                                props.updateImgDate({\n                                    headerImgUrl:nImageUrl,\n                                    headerImgName:imgname\n                                },imgname);\n                            }\n                        \n                        },\n                    )\n                })\n\n\n            });\n        }\n    };\n    return (\n      <Upload\n        name=\"avatar\"\n        listType=\"picture-card\"\n        className={styles.upload}\n        showUploadList={false}\n        beforeUpload={beforeUpload}\n        onChange={handleChange}\n      >\n        {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\n      </Upload>\n    )\n} "],"sourceRoot":""}
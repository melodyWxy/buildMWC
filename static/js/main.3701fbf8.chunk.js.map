{"version":3,"sources":["App.js","models/actions/login.js","servers/login.js","models/reducers/login.js","models/actions/blobs.js","servers/blobs.js","models/reducers/blobs.js","models/reducers/index.js","models/index.js","serviceWorker.js","index.js","utils/xFetch.js","static/logo.png","App.module.css"],"names":["RouterIndex","lazy","App","connect","login","dispatch","this","props","isLogin","loginCookie","window","localStorage","getItem","location","pathname","type","payload","values","cookie","fallback","className","styles","app","src","logo","Component","loginGlobal","a","async","xPost","res","login_effect","watchLogin","callback","call","isSuccess","data","msg","message","warning","user","headerImgUrl","put","loginTypes","setItem","takeEvery","initState","state","getBlobs","console","log","uploadBlobs","blobs_effect","blobs_Upload","home_effect","watchBlobs","error","blobsTypes","blobMd","md","homeMd","videoSrc","blobs","reducers","combineReducers","loginReducer","blobsReducer","sagaMiddleware","createSagaMiddleware","store","createStore","reducer","applyMiddleware","run","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","xGet","fetch","json","catch","result","url","body","method","headers","JSON","stringify","module","exports"],"mappings":"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","file":"static/js/main.3701fbf8.chunk.js","sourcesContent":["import React, { Component,lazy,Suspense } from 'react';\nimport {connect} from 'react-redux';\nimport {Spin} from 'antd';\nimport logo from './static/logo.png';\nimport styles from './App.module.css';\n\nconst RouterIndex = lazy(()=>import('./router'));\n@connect(({login})=>({\n  login\n}),dispatch=>({\n  dispatch\n}))\nclass App extends Component{\n  componentDidMount(){\n    const {login,dispatch} = this.props;\n    if(login&&!login.isLogin){\n      const loginCookie = window.localStorage.getItem('loginCookie');\n      if(loginCookie&&window.location.pathname!=='/login'){\n            dispatch({\n              type:\"USER_LOGIN\",\n              payload:{\n                values:{\n                  cookie:loginCookie\n                }\n              }\n            })\n      }\n    }\n  }\n  render(){\n    return (\n      <Suspense fallback={\n        <div className={styles.app}>\n           <img  src={logo} />\n           <Spin />\n        </div>\n      }>\n        <RouterIndex />\n      </Suspense>\n    )\n  }\n}\n\nexport default App;\n","export default {\n    login: \"LOGIN\",\n    refrech: \"REFRECH\"\n}","import {xPost} from './../utils/xFetch';\n\nexport async function loginGlobal (values){\n    const res = await xPost('/login',values);\n    return res;\n}","\nimport loginTypes from '../actions/login';\nimport { call, put, takeEvery } from 'redux-saga/effects';\nimport { loginGlobal } from '../../servers/login';\nimport { message } from 'antd';\n\nconst defaultHeaderSrc = 'https://melodyworld.oss-cn-beijing.aliyuncs.com/headers/defaultheader0.1.jpeg?x-oss-process=style/_90_90'\n\nexport  function* login_effect ({ payload={} }){\n    const { values, callback } = payload;\n    const res = yield call(loginGlobal,values);\n    const {isSuccess,data,msg} = res;\n    if(!isSuccess){\n        message.warning(msg);\n    }else{\n        if(!data.user.headerImgUrl){\n            data.user.headerImgUrl = defaultHeaderSrc;\n        }\n        yield put({\n            type:loginTypes.login,\n            payload:{\n                user: data.user\n            }\n        })\n        callback && callback(data);\n        window.localStorage.setItem(\"loginCookie\",data.cookie);\n    }\n}\n\nexport function* watchLogin() {\n  yield takeEvery('USER_LOGIN', login_effect)\n}\nconst initState = {\n    isLogin : false,\n    user:{}\n}\n\n\nfunction login(state = initState,{ type='', payload={} }){\n    const {user={}} = payload;\n    switch(type){\n        case loginTypes.login:\n            return { \n                ...state,\n                isLogin:true,\n                user\n            }\n        default: \n            return state\n    }\n}\n\nexport default login;","export default {\n    \"update\": \"blobs_update\",\n}","import  {xPost} from './../utils/xFetch';\n\nexport async function getBlobs(values){\n    console.log(values);\n    const res = await xPost('/blob',values);\n    return res;\n} \n\nexport async function uploadBlobs(values){\n    const res = await xPost('/blob/upload',values);\n    return res; \n}","\nimport blobsTypes from '../actions/blobs';\nimport { call, put, takeEvery } from 'redux-saga/effects';\nimport { getBlobs, uploadBlobs} from '../../servers/blobs';\nimport { message } from 'antd';\n\nfunction* blobs_effect ({ payload={} }){\n    const { values, callback } = payload;\n    const res = yield call(getBlobs,values);\n    const {isSuccess, data={} } = res;\n    if(!isSuccess){\n        message.error('没有这个文档呢~');\n    }else{\n        yield put({\n            type:blobsTypes.update,\n            payload:{\n                blobMd: data.md\n            }\n        })\n        callback && callback(data);\n    }\n}\n\nfunction* blobs_Upload ({ payload={} }){\n    const { values, callback } = payload;\n    const res = yield call(uploadBlobs,values);\n    console.log(res);\n    if(!res.isSuccess){\n        return message.error(res.msg);\n    }\n    //todo\n    \n}\n\nfunction* home_effect( {payload={}} ){\n    const { values, callback } = payload;\n    const res = yield call(getBlobs,values);\n    const {isSuccess, data={} } = res;\n    if(!isSuccess){\n        message.error('没有这个文档呢~');\n    }else{\n        yield put({\n            type:blobsTypes.update,\n            payload:{\n                homeMd: data.md\n            }\n        })\n        callback && callback(data);\n    }\n}\n\n\nexport function* watchBlobs() {\n  yield takeEvery('UPDATE_BLOBMD',blobs_effect );\n  yield takeEvery('UPLOAD_BLOBS',blobs_Upload);\n  yield takeEvery('UPDATE_HOMEMD',home_effect);\n}\nconst initState = {\n    blobMd:'' ,\n    homeMd:'' ,\n    videoSrc:'' ,\n}\n\n\nfunction blobs(state = initState,{ type='', payload={} }){\n    switch(type){\n        case blobsTypes.update:\n            return {\n                ...state,\n                ...payload\n            }\n        default: \n            return state\n    }\n}\n\n\n\nexport default blobs;","import { combineReducers } from 'redux';\nimport loginReducer from  './login';\nimport blobsReducer from './blobs';\n\n\nconst reducers = combineReducers({\n    login:loginReducer,\n    blobs:blobsReducer\n})\n\n\nexport default reducers;","import {createStore,applyMiddleware} from 'redux';\nimport reducer from './reducers';\nimport createSagaMiddleware from 'redux-saga';\n// 打入所有监听\nimport { watchLogin } from './reducers/login';\nimport { watchBlobs } from './reducers/blobs';\n\n\nconst sagaMiddleware = createSagaMiddleware()\nconst store = createStore(reducer,applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(watchLogin);\nsagaMiddleware.run(watchBlobs);\n\n\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport App from './App';\nimport store from './models';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App  />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export  async function xGet(...props){\n    const result = await fetch(...props)\n        .then(res=>res.json())\n        .catch(console.error)\n    return result;\n}\nexport async function xPost(url,body){\n    const result = await fetch(url,{\n          method: \"POST\",\n          headers:{\n            \"Content-Type\":\"application/json\"\n          },\n          body:JSON.stringify(body)\n        })\n        .then(res=>res.json())\n        .catch(console.error)\n    return result;\n}","module.exports = __webpack_public_path__ + \"static/media/logo.6c89b074.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\"};"],"sourceRoot":""}
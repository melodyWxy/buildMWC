{"version":3,"sources":["pages/Register/index.module.css","pages/Register/index.js"],"names":["module","exports","UploadHeader","lazy","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","RegistrationForm","connect","login","dispatch","withRouter","state","confirmDirty","autoCompleteResult","imgData","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","a","async","headerImgUrl","headerImgName","Public_key","NodeRSA","publicDer","nickname","encrypt","password","confirm","console","log","xPost","res","isSuccess","message","success","msg","setTimeout","history","push","window","location","href","replace","origin","error","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","this","localStorage","getItem","xGet","then","code","data","setItem","catch","getFieldDecorator","onSubmit","className","styles","Item","label","fallback","size","updateImgDate","title","type","rules","required","whitespace","hasFeedback","validator","Password","onBlur","htmlType","React","Component","WrappedRegistrationForm","Form","create","name"],"mappings":"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","file":"static/js/10.e814e9a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Register_form__2ap8N\"};","import React,{lazy,Suspense} from 'react';\nimport { connect } from 'react-redux'\nimport {\n  Form,\n  Input,\n  Tooltip,\n  Icon,\n  Button,\n  message,\n  Spin\n} from 'antd';\nimport {withRouter} from 'react-router-dom';\nimport NodeRSA from 'node-rsa';\nimport { xGet, xPost } from '../../utils/xFetch';\nimport styles from  \"./index.module.css\";\n\n\nconst UploadHeader = lazy(()=>import('./UploadHeader'))\n\n\n\nconst formItemLayout = {\n    labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n    },\n    wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n    },\n};\nconst tailFormItemLayout = {\n    wrapperCol: {\n    xs: {\n        span: 24,\n        offset: 0,\n    },\n    sm: {\n        span: 16,\n        offset: 8,\n    },\n    },\n};\n\n@withRouter\n@connect(({login})=>({\n    login\n}),dispatch=>({\n  dispatch\n}))\nclass RegistrationForm extends React.Component {\n    \n  state = {\n    confirmDirty: false,\n    autoCompleteResult: [],\n  };\n   imgData= {}\n\n   handleSubmit =  e => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll(async (err, values) => {\n      if (!err) {\n        const {headerImgUrl,headerImgName} = this.imgData;\n        headerImgUrl&&(values.headerImgUrl = headerImgUrl);\n        headerImgName&&(values.headerImgName = headerImgName);\n        const Public_key = new NodeRSA(this.publicDer);\n        // 公钥加密\n        values.nickname = Public_key.encrypt(values.nickname,'base64','utf8');\n        values.password = Public_key.encrypt(values.password,'base64','utf8');\n        values.confirm = Public_key.encrypt(values.confirm,'base64','utf8');\n        console.log('小朋友你在看什么嘞?',values);\n        const res = await xPost('/register',values)\n        if(!res.isSuccess){\n          message.error(res.msg||'');\n        }else{\n          message.success(res.msg||'');\n          setTimeout(()=>{\n            this.props.history.push(`/login${window.location.href.replace(window.location.origin+'/register','')}`);\n          },800)\n        } \n      }\n    });\n  };\n\n  componentDidMount(){\n    this.publicDer =  window.localStorage.getItem('publicDer');\n    if(!this.publicDer){\n      xGet('/der/getPublicDer')\n        .then(res=>{\n          if(res.code===200){\n            this.publicDer = res.data.publicDer;\n            window.localStorage.setItem('publicDer',this.publicDer)\n          }else{\n            message.error(res.msg||'获取公钥失败！')\n          }\n        })\n        .catch(err=>{\n          console.log(err);\n          message.error('获取公钥失败！您的网络是否已打开？')\n        })\n    }\n  }\n\n  handleConfirmBlur = e => {\n    const { value } = e.target;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  };\n\n\n\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form {...formItemLayout} onSubmit={this.handleSubmit} className={styles.form}>\n        <Form.Item\n          label={\n            <span>\n              Head portrait&nbsp;\n            </span>\n          }\n        > \n          <Suspense fallback={<Spin size=\"large\" />}>\n            <UploadHeader updateImgDate={(data)=>{\n              console.log(data);\n              this.imgData=data;\n            }}/>\n          </Suspense>\n        </Form.Item>\n        <Form.Item\n          label={\n            <span>\n              Username&nbsp;\n              <Tooltip title=\"也作为你的昵称(nickname)\">\n                <Icon type=\"question-circle-o\" />\n              </Tooltip>\n            </span>\n          }\n        >\n          {getFieldDecorator('nickname', {\n            rules: [{ required: true, message: 'Please input your nickname!', whitespace: true }],\n          })(<Input />)}\n        </Form.Item>\n        <Form.Item label=\"Password\" hasFeedback>\n          {getFieldDecorator('password', {\n            rules: [\n              {\n                required: true,\n                message: 'Please input your password!',\n              },\n              {\n                validator: this.validateToNextPassword,\n              },\n            ],\n          })(<Input.Password />)}\n        </Form.Item>\n    \n        <Form.Item label=\"Confirm Password\" hasFeedback>\n          {getFieldDecorator('confirm', {\n            rules: [\n              {\n                required: true,\n                message: 'Please confirm your password!',\n              },\n              {\n                validator: this.compareToFirstPassword,\n              },\n            ],\n          })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n        </Form.Item>\n\n        <Form.Item label=\"E-mail\">\n          {getFieldDecorator('email', {\n            rules: [\n              {\n                type: 'email',\n                message: 'The input is not valid E-mail!',\n              },\n              {\n                required: true,\n                message: 'Please input your E-mail!',\n              },\n            ],\n          })(<Input />)}\n        </Form.Item>\n        <Form.Item {...tailFormItemLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Register\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst WrappedRegistrationForm = Form.create({ name: 'register' })(RegistrationForm);\n\nexport default WrappedRegistrationForm;"],"sourceRoot":""}
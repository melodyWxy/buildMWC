{"version":3,"sources":["utils/search2obj.js","pages/Login/index.js"],"names":["se","arr","substr","split","obj","newarr","map","v","i","NormalLoginForm","connect","login","dispatch","withRouter","publicDer","handleSubmit","e","preventDefault","props","form","validateFields","err","values","a","async","params","window","location","search","search2obj","Public_key","NodeRSA","nickname","encrypt","password","console","log","history","type","payload","callback","path","push","linkToRegister","nowPath","href","replace","origin","this","localStorage","getItem","xGet","then","res","code","data","setItem","message","error","msg","catch","getFieldDecorator","onSubmit","className","Item","rules","required","prefix","style","color","placeholder","to","htmlType","onClick","React","Component","WrappedNormalLoginForm","Form","create","name"],"mappings":"uZAAe,WAASA,GACtB,GAAkB,qBAAPA,EAAoB,CAE7B,IAAIC,GADJD,EAAKA,EAAGE,OAAO,IACFC,MAAM,KACfC,EAAM,GACNC,EAAS,GAQb,OAPAJ,EAAIK,KAAI,SAASC,EAAEC,GAKf,OAJAH,EAASE,EAAEJ,MAAM,KACY,qBAAnBC,EAAIC,EAAO,MACjBD,EAAIC,EAAO,IAAMA,EAAO,IAErB,QAEJD,I,iBCGLK,G,EALLC,aAAQ,kBAAY,CACnBC,MADO,EAAEA,UAER,SAAAC,GAAQ,MAAG,CACZA,eAJDC,Y,iNAOCC,UAAY,G,EACZC,aAAe,SAAAC,GACbA,EAAEC,iBACF,EAAKC,MAAMC,KAAKC,gBAAe,SAAOC,EAAKC,GAAZ,qBAAAC,EAAAC,OAAA,gDACxBH,IAEGI,EAAUC,OAAOC,SAASC,QAAUC,EAAWH,OAAOC,SAASC,QAC/DE,EAAa,IAAIC,IAAQ,EAAKjB,WAGpCQ,EAAOU,SAAWF,EAAWG,QAAQX,EAAOU,SAAS,SAAS,QAC9DV,EAAOY,SAAWJ,EAAWG,QAAQX,EAAOY,SAAS,SAAS,QAC9DC,QAAQC,IAAI,wFAAkBd,GARtB,EASiB,EAAKJ,MAAtBmB,eATA,MASU,GATV,EAUR,EAAKnB,MAAMN,SAAS,CAClB0B,KAAM,aACNC,QAAS,CACPjB,SACAkB,SAAS,WACP,IAAMC,EAAOhB,EAAOe,UAAU,IAC9BH,EAAQK,KAAKD,QAjBQ,yC,EAwBjCE,eAAiB,WAEf,IAAMC,EAAUlB,OAAOC,SAASkB,KAAKC,QAAQpB,OAAOC,SAASoB,OAAO,SAAS,IAC7E,EAAK7B,MAAMmB,SAAS,EAAKnB,MAAMmB,QAAQK,KAAnB,mBAAoCE,K,mFAGtC,IAAD,OACjBI,KAAKlC,UAAaY,OAAOuB,aAAaC,QAAQ,aAC1CF,KAAKlC,WACPqC,YAAK,qBACFC,MAAK,SAAAC,GACU,MAAXA,EAAIC,MACL,EAAKxC,UAAYuC,EAAIE,KAAKzC,UAC1BY,OAAOuB,aAAaO,QAAQ,YAAY,EAAK1C,YAE7C2C,IAAQC,MAAML,EAAIM,KAAK,iDAG1BC,OAAM,SAAAvC,GACLc,QAAQC,IAAIf,GACZoC,IAAQC,MAAM,+G,+BAKZ,IACAG,EAAsBb,KAAK9B,MAAMC,KAAjC0C,kBACR,OACE,kBAAC,IAAD,CAAMC,SAAUd,KAAKjC,aAAcgD,UAAU,cAC3C,kBAAC,IAAKC,KAAN,KACGH,EAAkB,WAAY,CAC7BI,MAAO,CAAC,CAAEC,UAAU,EAAMT,QAAS,6CADpCI,CAGC,kBAAC,IAAD,CACEM,OAAQ,kBAAC,IAAD,CAAM7B,KAAK,OAAO8B,MAAO,CAAEC,MAAO,qBAC1CC,YAAY,eAIlB,kBAAC,IAAKN,KAAN,KACGH,EAAkB,WAAY,CAC7BI,MAAO,CAAC,CAAEC,UAAU,EAAMT,QAAS,iCADpCI,CAGC,kBAAC,IAAD,CACEM,OAAQ,kBAAC,IAAD,CAAM7B,KAAK,OAAO8B,MAAO,CAAEC,MAAO,qBAC1C/B,KAAK,WACLgC,YAAY,eAIlB,kBAAC,IAAKN,KAAN,KACE,kBAAC,IAAD,CAAMD,UAAU,oBAAoBQ,GAAG,gBAAvC,wCAGA,kBAAC,IAAD,CAAQjC,KAAK,UAAUkC,SAAS,SAAST,UAAU,qBAAnD,UAJF,MAOK,uBAAGU,QAAWzB,KAAKL,gBAAnB,yC,GArFiB+B,IAAMC,a,OA4F9BC,EAAyBC,IAAKC,OAAO,CAAEC,KAAM,gBAApBF,CAAsCpE,GAEtDmE","file":"static/js/9.53ca2a2f.chunk.js","sourcesContent":["export default function(se){\n  if (typeof se !== \"undefined\") {    \n    se = se.substr(1);\n    var arr = se.split(\"&\"),\n        obj = {}, \n        newarr = [];\n    arr.map(function(v,i){\n        newarr = v.split(\"=\");\n        if(typeof obj[newarr[0]] === \"undefined\"){\n            obj[newarr[0]] = newarr[1];\n        }\n        return null;\n    });\n    return obj;\n} ;\n}","import React from 'react';\nimport { Form, Icon, Input, Button, message } from 'antd';\nimport { Link, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport NodeRSA from 'node-rsa';\nimport search2obj from '../../utils/search2obj';\nimport './index.css';\nimport { xGet } from '../../utils/xFetch';\n\n\n@withRouter\n@connect(({login})=>({\n  login\n}),dispatch=>({\n  dispatch\n}))\nclass NormalLoginForm extends React.Component {\n  publicDer = '';\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields(async (err, values) => {\n      if (!err) {\n        // const res =await xPost('/login',values);\n        const params =  window.location.search && search2obj(window.location.search);\n        const Public_key = new NodeRSA(this.publicDer);\n\n        // 公钥加密\n        values.nickname = Public_key.encrypt(values.nickname,'base64','utf8');\n        values.password = Public_key.encrypt(values.password,'base64','utf8');\n        console.log('小朋友，你是看不见账号密码的!',values);\n        const { history = {} } = this.props;\n        this.props.dispatch({\n          type: \"USER_LOGIN\",\n          payload: {\n            values,\n            callback:()=>{\n              const path = params.callback||'/'\n              history.push(path)\n            }\n          }\n        })\n      }\n    });\n  };\n  linkToRegister = ()=>{\n    //记录当前的path参数\n    const nowPath = window.location.href.replace(window.location.origin+'/login','');\n    this.props.history&&this.props.history.push(`/register${nowPath}`);\n  }\n  \n  componentDidMount(){\n    this.publicDer =  window.localStorage.getItem('publicDer');\n    if(!this.publicDer){\n      xGet('/der/getPublicDer')\n        .then(res=>{\n          if(res.code===200){\n            this.publicDer = res.data.publicDer;\n            window.localStorage.setItem('publicDer',this.publicDer)\n          }else{\n            message.error(res.msg||'获取公钥失败！')\n          }\n        })\n        .catch(err=>{\n          console.log(err);\n          message.error('获取公钥失败！您的网络是否已打开？')\n        })\n    }\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form onSubmit={this.handleSubmit} className=\"login-form\">\n        <Form.Item>\n          {getFieldDecorator('nickname', {\n            rules: [{ required: true, message: 'Please input your username or nickname!' }],\n          })(\n            <Input\n              prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              placeholder=\"Username\"\n            />,\n          )}\n        </Form.Item>\n        <Form.Item>\n          {getFieldDecorator('password', {\n            rules: [{ required: true, message: 'Please input your Password!' }],\n          })(\n            <Input\n              prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              type=\"password\"\n              placeholder=\"Password\"\n            />,\n          )}\n        </Form.Item>\n        <Form.Item>\n          <Link className=\"login-form-forgot\" to=\"/user/forget\">\n            密码忘记了？\n          </Link>\n          <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n            Log in\n          </Button>\n          Or <a onClick = {this.linkToRegister}>现在注册吧!</a>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst WrappedNormalLoginForm = Form.create({ name: 'normal_login' })(NormalLoginForm);\n\nexport default WrappedNormalLoginForm;"],"sourceRoot":""}